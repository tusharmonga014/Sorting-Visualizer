{"version":3,"sources":["defaults/index.js","components/ArrayBars/ArrayBars.jsx","components/ArrayBars/ArrayBars.js","components/ControlBar/ControlBar.jsx","reducers/utilities/swapValuesInArray.js","reducers/utilities/setValueInArrayUsingSplice.js","reducers/arrayReducer/index.js","reducers/index.js","reducers/algorithmRedcuer/index.js","reducers/speedReducer/index.js","reducers/currenltyCheckingReducer/index.js","reducers/pivotReducer/index.js","reducers/sortedArrayReducer/index.js","reducers/sortingRunStatus/index.js","store/index.js","actions/array/index.js","actions/currentlyChecking/index.js","actions/sortedArray/index.js","algorithms/helpers/getSortingRunStatus.js","algorithms/helpers/checkCurrentStatus.js","algorithms/helpers/getTimeDelay.js","algorithms/helpers/sleep.js","algorithms/bubbleSort.js","actions/sortingRunStatus/index.js","actions/speed/index.js","components/ControlBar/ControlBar.js","actions/algorithm/index.js","algorithms/index.js","components/SortingVisualizer/SortingVisualizer.jsx","components/App.js","index.js"],"names":["ARRAY_MAX_VALUE","window","screen","width","MAX_ARRAY_SIZE","DEFAULT_ARRAY_SIZE","DEFAULT_SELECTED_ALGORITHM","MARGIN_BETWEEN_BARS","arraySize","SCREEN_PERCENTAGE_TO_OCCUPY","ArrayBars","getMarginBetweenBars","getBarsDisplayAreaWidth","screenWidth","Math","floor","getBarWidth","barsDisplayAreaWidth","marginBetween","showBarHeight","event","barId","target","id","barIdForHeightDisplay","bar","document","getElementById","barHeightDisplayBox","style","opacity","removeAttribute","zIndex","hideBarHeight","setAttribute","this","props","array","currentlyChecking","pivot","sortedArray","length","barWidth","displayBarHeight","className","map","idx","backgroundColor","includes","hidden","height","marginLeft","onMouseOver","onMouseLeave","Component","connect","state","algorithm","dispatch","ControlBar","resetArray","generateArray","changeArraySize","value","getAlgorithmNameInTitleCase","console","error","changeAlgorithm","selectedAlgo","selectedAlgoTitleCase","innerText","changeSpeed","selectedSpeed","Number","disableArrayAlgorithmInputs","buttonsToBeDisabled","getElementsByClassName","buttonDisablingIterator","disableArrayAlgorithmTexts","textsToBeDisabled","textDisablingIterator","classList","remove","add","enableArrayAlgorithmInputs","buttonsToBeEnabled","buttonEnablingIterator","enableArrayAlgorithmTexts","textsToBeEnabled","textEnablingIterator","hideStartSortingButton","showStartSortingButton","showPauseButton","hidePauseButton","showContinueButton","hideContinueButton","showStopSortinButton","hideStopSortingButton","manageControlBarFeaturesWhenSortingStarts","manageControlBarFeaturesWhenSortingStops","startSorting","pauseSorting","continueSorting","stopSorting","handleIfSortingCompleted","sortingRunStatus","onClick","type","min","max","defaultValue","onChange","checkIfIndexOutOfBounds","index","swapValuesInArray","firstIdx","secondIdx","temp","setValueInArrayUsingSplice","replaceCounter","splice","rootReducer","combineReducers","action","payload","data","speed","concat","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","swapValues","setCurrentlyChecking","addToSortedArray","getCurrentSortingRunStatus","getState","a","Promise","resolve","reject","setInterval","checkCurrentSortingRunStatus","getTimeDelay","setTimeout","sleep","localArray","outerLoopIterator","innerLoopIterator","then","catch","bubbleSort","getRandomValue","lowerLimit","upperLimit","random","empty_CurrentlyArray_and_SortedArray","randomGeneratedArray","i","push","generateRandomArray","mergeSort","quickSort","heapSort","sort","SortingVisualizer","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.e1183d69.chunk.js","sourcesContent":["/**\r\n * Array's lowest value\r\n */\r\nconst ARRAY_MIN_VALUE = 40;\r\n/**\r\n * Array's largest value\r\n * ARRAY_MAX_VALUE > 500 will overlap with Control-Bar\r\n */\r\nconst ARRAY_MAX_VALUE = window.screen.width <= 700 ? 350 : 425;\r\n\r\n/**\r\n * Sorting speed range\r\n * SORTING_SPEED_LOWER_LIMIT is 0 always\r\n */\r\nconst SORTING_SPEED_UPPER_LIMIT = 500;\r\nconst DEFAULT_SELECTED_SPEED = 500;\r\n\r\n/**\r\n * Minimum array length\r\n */\r\nconst MIN_ARRAY_SIZE = 10;\r\n/**\r\n * Maximum array length\r\n */\r\nconst MAX_ARRAY_SIZE = window.screen.width <= 600 ? 100 : 200;\r\nconst DEFAULT_ARRAY_SIZE = MAX_ARRAY_SIZE / 1.5;\r\n\r\n/**\r\n * Bar colour when its neither sorted \r\n * nor in the process of being sorted\r\n */\r\nconst BAR__COLOUR_DEFAULT = 'rgb(0, 204, 255)';\r\n// const BAR__COLOUR_DEFAULT = 'rgb(0, 255, 145)';\r\n/**\r\n * Bar colour when its in the process for sorting\r\n */\r\nconst BAR_COLOUR_WHILE_CHECKING = 'blue';\r\n/**\r\n * Bar colour when it has been sorted\r\n */\r\nconst BAR_COLOUR_SORTED = 'purple';\r\n/**\r\n * Bar colour when it is pivot\r\n */\r\nconst BAR_COLOUR_PIVOT = 'rgb(102, 255, 51)';\r\n\r\n\r\n/**\r\n * Default selected sorting algorithm\r\n * shown in dropdown algo selector\r\n */\r\nconst DEFAULT_SELECTED_ALGORITHM = 'MERGE_SORT';\r\n\r\n/**\r\n * tells margin between bars\r\n * @param {*} arraySize the length of array \r\n * @returns space between each bar depending upon the arraySize\r\n */\r\nconst MARGIN_BETWEEN_BARS = (arraySize) => {\r\n    return arraySize <= 10 ? 4\r\n        : arraySize <= 50 ? 2\r\n            : 1\r\n};\r\n\r\n/**\r\n * tells the amount of screen to occupy\r\n * @param {*} arraySize the length of the array\r\n * @returns the amount of screen to occupy in \r\n *          terms of decimal from 0-1 where \r\n *          0 shows empty space and\r\n *          1 shows full screen \r\n */\r\nconst SCREEN_PERCENTAGE_TO_OCCUPY = (arraySize) => {\r\n    return window.screen.width <= 600 ? 0.80\r\n        : arraySize <= 16 ? 0.50\r\n            : 0.66;\r\n}\r\n\r\n/**\r\n * .............................\r\n * EXPORTS\r\n * ............................. \r\n */\r\nexport {\r\n    ARRAY_MIN_VALUE,\r\n    ARRAY_MAX_VALUE,\r\n    SORTING_SPEED_UPPER_LIMIT,\r\n    DEFAULT_SELECTED_SPEED,\r\n    MIN_ARRAY_SIZE,\r\n    MAX_ARRAY_SIZE,\r\n    DEFAULT_ARRAY_SIZE,\r\n    BAR__COLOUR_DEFAULT,\r\n    BAR_COLOUR_WHILE_CHECKING,\r\n    BAR_COLOUR_SORTED,\r\n    BAR_COLOUR_PIVOT,\r\n    DEFAULT_SELECTED_ALGORITHM,\r\n    MARGIN_BETWEEN_BARS,\r\n    SCREEN_PERCENTAGE_TO_OCCUPY\r\n}","import React, { Component } from \"react\"\r\nimport { BAR_COLOUR_PIVOT, BAR_COLOUR_SORTED, BAR_COLOUR_WHILE_CHECKING, BAR__COLOUR_DEFAULT, MARGIN_BETWEEN_BARS, SCREEN_PERCENTAGE_TO_OCCUPY } from \"../../defaults\";\r\nimport \"./ArrayBars.css\";\r\n\r\nclass ArrayBars extends Component {\r\n\r\n    getMarginBetweenBars = (arraySize) => {\r\n        const marginBetween = MARGIN_BETWEEN_BARS(arraySize);\r\n        return marginBetween;\r\n    }\r\n\r\n    getBarsDisplayAreaWidth = (arraySize) => {\r\n        const screenWidth = window.screen.width;\r\n        const barsDisplayAreaWidth = Math.floor(screenWidth * SCREEN_PERCENTAGE_TO_OCCUPY(arraySize));\r\n        return barsDisplayAreaWidth;\r\n    }\r\n\r\n    getBarWidth = (arraySize, barsDisplayAreaWidth, marginBetween) => {\r\n        const barWidth = (barsDisplayAreaWidth - (marginBetween * arraySize)) / arraySize;\r\n        return barWidth;\r\n    }\r\n\r\n    showBarHeight = (event) => {\r\n        /**\r\n         * Obataining bar and its height display \r\n         * box id from the event\r\n         */\r\n        const barId = event.target.id;\r\n        const barIdForHeightDisplay = 'bar' + barId;\r\n\r\n        /**\r\n         * Getting the HTML element through their ids\r\n         */\r\n        const bar = document.getElementById(barId);\r\n        const barHeightDisplayBox = document.getElementById(barIdForHeightDisplay);\r\n\r\n        /**\r\n         * Opacity becomes 0.5 when mouse enters the bar,\r\n         * Height Display Box becomes visible,\r\n         * Z-index of box is set to 1 to bring it forward than bar\r\n         */\r\n        bar.style.opacity = 0.5;\r\n        barHeightDisplayBox.removeAttribute('hidden');\r\n        barHeightDisplayBox.style.zIndex = 1;\r\n    }\r\n\r\n    hideBarHeight = (event) => {\r\n        /**\r\n         * Obataining bar and its height display \r\n         * box id from the event\r\n         */\r\n        const barId = event.target.id;\r\n        const barIdForHeightDisplay = 'bar' + barId;\r\n\r\n        /**\r\n         * Getting the HTML element through their ids\r\n         */\r\n        const bar = document.getElementById(barId);\r\n        const barHeightDisplayBox = document.getElementById(barIdForHeightDisplay);\r\n\r\n        /**\r\n         * Opacity becomes normal when mouse leaves the bar,\r\n         * Height Display Box again becomes hidden,\r\n         * Z-index of box is again set to 0 to prevent its area\r\n         * from stopping mouse over effect for its bar\r\n         */\r\n        bar.style.opacity = 1;\r\n        barHeightDisplayBox.setAttribute('hidden', true);\r\n        barHeightDisplayBox.style.zIndex = 0;\r\n    }\r\n\r\n    render() {\r\n\r\n        const { array, currentlyChecking, pivot, sortedArray } = this.props;\r\n\r\n        const arraySize = array.length;\r\n        const barsDisplayAreaWidth = this.getBarsDisplayAreaWidth(arraySize);\r\n        const marginBetween = this.getMarginBetweenBars(arraySize);\r\n        const barWidth = this.getBarWidth(arraySize, barsDisplayAreaWidth, marginBetween);\r\n        const displayBarHeight = window.screen.width >= 500 && arraySize < 23 ? true : false;\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"bars\" style={{ width: barsDisplayAreaWidth }}>\r\n                    {\r\n                        array.length > 0 && array.map((bar, idx) => {\r\n                            let backgroundColor = currentlyChecking.includes(idx) ? BAR_COLOUR_WHILE_CHECKING : BAR__COLOUR_DEFAULT;\r\n                            backgroundColor = idx === pivot ? BAR_COLOUR_PIVOT : backgroundColor;\r\n                            backgroundColor = sortedArray.includes(idx) ? BAR_COLOUR_SORTED : backgroundColor;\r\n                            const barIdForHeightDisplay = 'bar' + idx;\r\n\r\n                            return (\r\n                                <div key={idx}>\r\n\r\n                                    {/* bar height display box */}\r\n                                    <div\r\n                                        id={barIdForHeightDisplay}\r\n                                        className=\"bar-height-display\"\r\n                                        hidden>\r\n                                        {bar}\r\n                                    </div>\r\n\r\n                                    {/* bar */}\r\n                                    <div\r\n                                        id={idx}\r\n                                        className=\"bar\"\r\n                                        style={{ width: barWidth, height: bar, backgroundColor: backgroundColor, marginLeft: marginBetween }}\r\n                                        onMouseOver={this.showBarHeight}\r\n                                        onMouseLeave={this.hideBarHeight}>\r\n                                        {displayBarHeight ? bar : ''}\r\n                                    </div>\r\n\r\n                                </div>\r\n                            );\r\n                        })\r\n                    }\r\n                </div >\r\n\r\n                <div className='base-block bg-dark text-center'></div>\r\n\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nexport default ArrayBars;","import ArrayBars from \"./ArrayBars.jsx\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    const array = state.array;\r\n    const algorithm = state.algorithm;\r\n    const currentlyChecking = state.currentlyChecking;\r\n    const pivot = state.pivot;\r\n    const sortedArray = state.sortedArray;\r\n    return { array, algorithm, currentlyChecking, pivot, sortedArray };\r\n}\r\n\r\nconst mapDispatchToProps = () => dispatch => ({\r\n\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ArrayBars);","import React, { Component } from \"react\";\r\nimport { DEFAULT_ARRAY_SIZE, DEFAULT_SELECTED_ALGORITHM, DEFAULT_SELECTED_SPEED, MAX_ARRAY_SIZE, MIN_ARRAY_SIZE, SORTING_SPEED_UPPER_LIMIT } from \"../../defaults\";\r\nimport \"./ControlBar.css\";\r\n\r\nclass ControlBar extends Component {\r\n\r\n  /**\r\n   * Generates a new Array of given length\r\n   * @param {number} arraySize length for new Array\r\n   */\r\n  resetArray = (arraySize) => {\r\n    this.props.generateArray(arraySize);\r\n  }\r\n\r\n  /**\r\n   * Changes and generates a new array of selected length\r\n   * @param {event} event Event which trigerred the function\r\n   */\r\n  changeArraySize = (event) => {\r\n    this.resetArray(event.target.value);\r\n  }\r\n\r\n  /**\r\n   * Returns the algorithm name in Title Case\r\n   * @param {*} algorithm The algorithm whose name is to be returned in Title Case\r\n   * @returns Algorithm name in Title Case\r\n   */\r\n  getAlgorithmNameInTitleCase = (algorithm) => {\r\n    switch (algorithm) {\r\n      case 'BUBBLE_SORT': return 'Bubble Sort';\r\n      case 'MERGE_SORT': return 'Merge Sort';\r\n      case 'QUICK_SORT': return 'Quick Sort';\r\n      case 'HEAP_SORT': return 'Heap Sort';\r\n      default: {\r\n        console.error('No algorithm provided for conversion to title case');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Changes the algorithm \r\n   * @param {event} event Event which trigerred the function\r\n   */\r\n  changeAlgorithm = (event) => {\r\n    const selectedAlgo = event.target.value;\r\n    this.props.changeAlgorithm(selectedAlgo);\r\n    const selectedAlgoTitleCase = this.getAlgorithmNameInTitleCase(selectedAlgo);\r\n    document.getElementById(\"dropdown-algo-selector\").innerText = selectedAlgoTitleCase;\r\n  }\r\n\r\n  /**\r\n  * Changes the algorithm \r\n  * @param {event} event Event which trigerred the function\r\n  */\r\n  changeSpeed = (event) => {\r\n    const selectedSpeed = (Number)(event.target.value);\r\n    this.props.changeSpeed(selectedSpeed);\r\n  }\r\n\r\n  /**\r\n   * Disables the control bar inputs for \r\n   * Array and Algorithm slelection\r\n   */\r\n  disableArrayAlgorithmInputs = () => {\r\n    const buttonsToBeDisabled = document.getElementsByClassName('input-disable-when-running');\r\n    for (let buttonDisablingIterator = 0; buttonDisablingIterator < buttonsToBeDisabled.length; buttonDisablingIterator++) {\r\n      buttonsToBeDisabled[buttonDisablingIterator].setAttribute('disabled', true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Disables the control bar's input-label-texts on the control bar\r\n   */\r\n  disableArrayAlgorithmTexts = () => {\r\n    const textsToBeDisabled = document.getElementsByClassName('text-disable-when-running');\r\n    for (let textDisablingIterator = 0; textDisablingIterator < textsToBeDisabled.length; textDisablingIterator++) {\r\n      textsToBeDisabled[textDisablingIterator].classList.remove('text-white');\r\n      textsToBeDisabled[textDisablingIterator].classList.add('text-muted');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Enables the control bar inputs for \r\n   * Array and Algorithm slelection\r\n   */\r\n  enableArrayAlgorithmInputs = () => {\r\n    const buttonsToBeEnabled = document.getElementsByClassName('input-disable-when-running');\r\n    for (let buttonEnablingIterator = 0; buttonEnablingIterator < buttonsToBeEnabled.length; buttonEnablingIterator++) {\r\n      buttonsToBeEnabled[buttonEnablingIterator].removeAttribute('disabled');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Enables the control bar's input-label-texts on the control bar\r\n   */\r\n  enableArrayAlgorithmTexts = () => {\r\n    const textsToBeEnabled = document.getElementsByClassName('text-disable-when-running');\r\n    for (let textEnablingIterator = 0; textEnablingIterator < textsToBeEnabled.length; textEnablingIterator++) {\r\n      textsToBeEnabled[textEnablingIterator].classList.remove('text-muted');\r\n      textsToBeEnabled[textEnablingIterator].classList.add('text-white');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Hides start sort button on the control bar\r\n   */\r\n  hideStartSortingButton = () => {\r\n    const startSortingButton = document.getElementById('btn-sort');\r\n    startSortingButton.setAttribute('hidden', true);\r\n  }\r\n\r\n  /**\r\n   * Shows start sort button on the control bar\r\n   */\r\n  showStartSortingButton = () => {\r\n    const startSortingButton = document.getElementById('btn-sort');\r\n    startSortingButton.removeAttribute('hidden');\r\n  }\r\n\r\n  /**\r\n   * Shows pause button on the control bar\r\n   */\r\n  showPauseButton = () => {\r\n    const pauseButton = document.getElementById('btn-pause');\r\n    pauseButton.removeAttribute('hidden');\r\n  }\r\n\r\n  /**\r\n   * Hides pause button on the control bar\r\n   */\r\n  hidePauseButton = () => {\r\n    const pauseButton = document.getElementById('btn-pause');\r\n    pauseButton.setAttribute('hidden', true);\r\n  }\r\n\r\n  /**\r\n   * Shows continue button on the control bar\r\n   */\r\n  showContinueButton = () => {\r\n    const continueButton = document.getElementById('btn-continue');\r\n    continueButton.removeAttribute('hidden');\r\n  }\r\n\r\n  /**\r\n   * Hides continue button on the control bar\r\n   */\r\n  hideContinueButton = () => {\r\n    const continueButton = document.getElementById('btn-continue');\r\n    continueButton.setAttribute('hidden', true);\r\n  }\r\n\r\n  /**\r\n   * Shows the stop sort button on the control bar\r\n   */\r\n  showStopSortinButton = () => {\r\n    const stopSortingButton = document.getElementById('btn-stop-sort');\r\n    stopSortingButton.removeAttribute('hidden');\r\n  }\r\n\r\n  /**\r\n   * Hides stop sort button on the control bar\r\n   */\r\n  hideStopSortingButton = () => {\r\n    const stopSortingButton = document.getElementById('btn-stop-sort');\r\n    stopSortingButton.setAttribute('hidden', true);\r\n  }\r\n\r\n  /**\r\n   * Disables Array and Algorithm related features\r\n   * and enables Sorting realted features\r\n   */\r\n  manageControlBarFeaturesWhenSortingStarts = () => {\r\n    this.disableArrayAlgorithmInputs();\r\n    this.disableArrayAlgorithmTexts();\r\n    this.hideStartSortingButton();\r\n    this.showPauseButton();\r\n    this.showStopSortinButton();\r\n  }\r\n\r\n  /**\r\n   * Enables Array and Algorithm related features\r\n   * and enables Sorting realted features\r\n   */\r\n  manageControlBarFeaturesWhenSortingStops = () => {\r\n    this.enableArrayAlgorithmInputs();\r\n    this.enableArrayAlgorithmTexts();\r\n    this.hidePauseButton();\r\n    this.hideContinueButton();\r\n    this.hideStopSortingButton();\r\n    this.showStartSortingButton();\r\n  }\r\n\r\n  /**\r\n   * Disables the control bar's feature \r\n   * and starts sorting\r\n   */\r\n  startSorting = () => {\r\n    this.manageControlBarFeaturesWhenSortingStarts();\r\n    this.props.startSorting();\r\n  }\r\n\r\n  /**\r\n   * Pauses the sorting\r\n   */\r\n  pauseSorting = () => {\r\n    this.props.pauseSorting();\r\n    this.hidePauseButton();\r\n    this.showContinueButton();\r\n  }\r\n\r\n  /**\r\n   * Continues the paused sorting process\r\n   */\r\n  continueSorting = () => {\r\n    this.hideContinueButton();\r\n    this.showPauseButton();\r\n    this.props.continueSorting();\r\n  }\r\n\r\n  /**\r\n   * Stops the current storting process\r\n   */\r\n  stopSorting = () => {\r\n    this.manageControlBarFeaturesWhenSortingStops();\r\n    this.props.stopSorting();\r\n  }\r\n\r\n  /**\r\n   * Checks if sorting is completed\r\n   * and calls the required control\r\n   * bar manager functions\r\n   */\r\n  handleIfSortingCompleted = () => {\r\n    this.props.sortingRunStatus === 'COMPLETED' && this.manageControlBarFeaturesWhenSortingStops();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray(DEFAULT_ARRAY_SIZE);\r\n  }\r\n\r\n\r\n  render() {\r\n    const { array } = this.props;\r\n    const arraySize = array.length;\r\n\r\n    this.handleIfSortingCompleted();\r\n\r\n    return (\r\n      <div className='nav navbar navbar-dark bg-dark text-center p-2'>\r\n        <div className='navbar navbar-brand col-sm-12 col-md-6 col-lg-4 text-center m-0 p-0'>\r\n          <h2>SORTING VISUALIZER</h2>\r\n        </div>\r\n\r\n        <div className=\"col-sm-12 col-md-6 col-lg-3 text-justify-end m-0 p-0 array-algo-buttons\">\r\n          <button className='generate-array-button btn btn-white btn-round mt-1 mb-1 mr-2 input-disable-when-running'\r\n            onClick={() => { this.resetArray(arraySize) }}>\r\n            Generate New Array\r\n          </button>\r\n\r\n          <div className=\"btn-group\">\r\n            <button\r\n              type=\"button\"\r\n              id=\"dropdown-algo-selector\"\r\n              className=\"btn btn-success dropdown-toggle input-disable-when-running\"\r\n              data-toggle=\"dropdown\"\r\n              aria-haspopup=\"true\"\r\n              aria-expanded=\"false\">\r\n              {this.getAlgorithmNameInTitleCase(DEFAULT_SELECTED_ALGORITHM)}\r\n            </button>\r\n            <div className=\"dropdown-menu\">\r\n              <h1 className=\"dropdown-header text-large\">Select Algorithm</h1>\r\n              <div className=\"dropdown-divider\"></div>\r\n              <button className=\"dropdown-item\"\r\n                value='MERGE_SORT'\r\n                onClick={this.changeAlgorithm}>\r\n                Merge Sort\r\n              </button>\r\n              <div className=\"dropdown-divider\"></div>\r\n              <button\r\n                className=\"dropdown-item\"\r\n                value='QUICK_SORT'\r\n                onClick={this.changeAlgorithm}>\r\n                Quick Sort\r\n              </button>\r\n              <div className=\"dropdown-divider\"></div>\r\n              <button\r\n                className=\"dropdown-item\"\r\n                value='BUBBLE_SORT'\r\n                onClick={this.changeAlgorithm}>\r\n                Bubble Sort\r\n              </button>\r\n              <div className=\"dropdown-divider\"></div>\r\n              <button\r\n                className=\"dropdown-item\"\r\n                value='HEAP_SORT'\r\n                onClick={this.changeAlgorithm}>\r\n                Heap Sort\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className='col-md-12 col-lg-3 row slider-controls text-justify-end'>\r\n          <div className='text-white text-center text-disable-when-running slider-controls col-sm-4 col-md-6 col-lg-6 mt-1 mb-1'>\r\n            Array Size :\r\n          </div>\r\n          <input\r\n            className='input-disable-when-running text-center slider-controls slider-range col-sm-7 col-md-6 col-lg-6 mt-1 mb-1'\r\n            type=\"range\"\r\n            min={MIN_ARRAY_SIZE}\r\n            max={MAX_ARRAY_SIZE}\r\n            defaultValue={DEFAULT_ARRAY_SIZE}\r\n            onChange={this.changeArraySize}\r\n          />\r\n          <div className='text-white text-center text-disable-when-running slider-controls col-sm-4 col-md-6 col-lg-6 mb-1'>\r\n            Sorting Speed :\r\n          </div>\r\n          <input\r\n            className='input-disable-when-running text-center slider-controls slider-range col-sm-7 col-md-6 col-lg-6 mb-1'\r\n            type=\"range\"\r\n            min=\"1\"\r\n            max={SORTING_SPEED_UPPER_LIMIT}\r\n            defaultValue={DEFAULT_SELECTED_SPEED}\r\n            onChange={this.changeSpeed}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"col-sm-12 col-md-12 col-lg-2 text-center mt-1 mb-1\">\r\n          <button\r\n            id=\"btn-sort\"\r\n            className=\"btn btn-success\"\r\n            onClick={this.startSorting}>\r\n            START SORTING\r\n          </button>\r\n\r\n          <button\r\n            id=\"btn-pause\"\r\n            className=\"btn btn-default\"\r\n            onClick={this.pauseSorting}\r\n            hidden>Pause\r\n          </button>\r\n          <button\r\n            id=\"btn-continue\"\r\n            className=\"btn btn-default\"\r\n            onClick={this.continueSorting}\r\n            hidden>Continue\r\n          </button>\r\n          <button\r\n            id=\"btn-stop-sort\"\r\n            className=\"btn btn-danger\"\r\n            onClick={this.stopSorting}\r\n            hidden>STOP\r\n          </button>\r\n\r\n        </div>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ControlBar;","function checkIfIndexOutOfBounds(index, arraySize) {\r\n    if (index < 0 || index >= arraySize) {\r\n        console.error(index + \" passed for swapping is out of bounds for \" + arraySize + \", can't swap values.\");\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Swaps the values in given array\r\n * @param {Array} array Array whose values need to be swapped \r\n * @param {number} firstIdx first index\r\n * @param {number} secondIdx second index\r\n */\r\nexport function swapValuesInArray(array, firstIdx, secondIdx) {\r\n\r\n    const arraySize = array.length;\r\n\r\n    // first and second index both should be in range 0 to (arraySize - 1)\r\n    if (checkIfIndexOutOfBounds(firstIdx, arraySize) || checkIfIndexOutOfBounds(secondIdx, arraySize)) {\r\n        return array;\r\n    }\r\n\r\n    let temp = array[firstIdx];\r\n    array[firstIdx] = array[secondIdx];\r\n    array[secondIdx] = temp;\r\n\r\n    return array;\r\n}","/**\r\n * Returns the array with value inserted at given index\r\n * @param {Array} array Array in which value needs to be inserted\r\n * @param {Number} index Index at wich value gets inserted\r\n * @param {Number} replaceCounter Number of indices to replace after given index by the given value\r\n * @param {*} value Value which is to be inserted\r\n * @returns Array with value inserted at index \r\n */\r\nexport function setValueInArrayUsingSplice(array, index, replaceCounter, value) {\r\n    array.splice(index, replaceCounter, value);\r\n    return array;\r\n}","import { setValueInArrayUsingSplice, swapValuesInArray } from \"../utilities\";\r\n\r\nexport const array = (state = [], action) => {\r\n    switch (action.type) {\r\n        case 'SET_ARRAY':\r\n            return action.payload;\r\n        case 'SWAP_VALUES':\r\n            return swapValuesInArray(state, action.payload.firstIdx, action.payload.secondIdx);\r\n        case 'SET_VALUE':\r\n            return setValueInArrayUsingSplice(state, action.payload.id, 1, action.payload.data);\r\n        default: return state;\r\n    }\r\n}","import { combineReducers } from \"redux\";\r\nimport { algorithm } from \"./algorithmRedcuer\";\r\nimport { array } from \"./arrayReducer\";\r\nimport { currentlyChecking } from \"./currenltyCheckingReducer\";\r\nimport { speed } from \"./speedReducer\";\r\nimport { pivot } from \"./pivotReducer\";\r\nimport { sortedArray } from \"./sortedArrayReducer\";\r\nimport { sortingRunStatus } from \"./sortingRunStatus\";\r\n\r\nconst rootReducer = combineReducers({\r\n    array,\r\n    algorithm,\r\n    speed,\r\n    currentlyChecking,\r\n    pivot,\r\n    sortedArray,\r\n    sortingRunStatus,\r\n});\r\n\r\nexport default rootReducer;","import { DEFAULT_SELECTED_ALGORITHM } from \"../../defaults\";\r\n\r\nexport const algorithm = (state = DEFAULT_SELECTED_ALGORITHM, action) => {\r\n    switch (action.type) {\r\n        case 'SET_ALGORITHM':\r\n            return  action.payload;\r\n        default: return state;\r\n    }\r\n}","import { DEFAULT_SELECTED_SPEED } from \"../../defaults\";\r\n\r\nexport const speed = (state = DEFAULT_SELECTED_SPEED, action) => {\r\n    switch (action.type) {\r\n        case 'SET_SPEED':\r\n            return action.payload;\r\n\r\n        default: return state;\r\n    }\r\n}","/**\r\n * It denotes the array of indices currently \r\n * being checked by the algorithm for sorting\r\n */\r\nexport const currentlyChecking = (state = [], action) => {\r\n    switch (action.type) {\r\n        case 'SET_CURRENTLYCHECKING':\r\n            return action.payload;\r\n\r\n        default: return state;\r\n    }\r\n}","\r\nexport const pivot = (state = -1, action) => {\r\n    switch (action.type) {\r\n        case 'SET_PIVOT':\r\n            return action.payload;\r\n\r\n        default: return state;\r\n    }\r\n}","\r\nexport const sortedArray = (state = [], action) => {\r\n    switch (action.type) {\r\n        case 'SET_SORTEDARRAY':\r\n            return action.payload;\r\n        case 'ADD_TO_SORTEDARRAY':\r\n            return state.concat(action.payload);\r\n        default: return state;\r\n    }\r\n}","\r\nexport const sortingRunStatus = (state = 'NOT_RUNNING', action) => {\r\n    switch (action.type) {\r\n        case 'STARTED':\r\n            return 'STARTED';\r\n        case 'CONTINUED':\r\n            return 'CONTINUED';\r\n        case 'PAUSED':\r\n            return 'PAUSED';\r\n        case 'STOPPED':\r\n            return 'STOPPED';\r\n        case 'COMPLETED':\r\n            return 'COMPLETED'\r\n\r\n        default: return state;\r\n    }\r\n}","import rootReducer from \"../reducers\";\r\nimport { createStore } from \"redux\";\r\n\r\nexport const store = createStore(\r\n    rootReducer,\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);","export const setArray = (payload) => {\r\n    return {\r\n        type: 'SET_ARRAY',\r\n        payload: payload\r\n    }\r\n};\r\n\r\n/**\r\n * Swaps the value at firstIdx with secondIdx \r\n * in store's state Array\r\n * @param {number} firstIdx first index\r\n * @param {number} secondIdx second index\r\n */\r\nexport const swapValues = (firstIdx, secondIdx) => {\r\n    return {\r\n        type: 'SWAP_VALUES',\r\n        payload: {\r\n            firstIdx: firstIdx,\r\n            secondIdx: secondIdx\r\n        }\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Sets value at specific index in store's State Array\r\n * @param {Object} payload\r\n * index : Index at which value needs to be stored,\r\n * value : The value which needs to be inserted\r\n * @returns An action object with type and payload\r\n */\r\nexport const setValue = (payload) => {\r\n    return {\r\n        type: 'SET_VALUE',\r\n        payload: {\r\n            id: payload.index,\r\n            data: payload.value\r\n        }\r\n    }\r\n}\r\n","export const setCurrentlyChecking = (payload) => {\r\n    return {\r\n        type: 'SET_CURRENTLYCHECKING',\r\n        payload: payload\r\n    }\r\n};\r\n","export const setSortedArray = (payload) => {\r\n    return {\r\n        type: 'SET_SORTEDARRAY',\r\n        payload: payload\r\n    }\r\n};\r\n\r\nexport const addToSortedArray = (payload) => {\r\n    return {\r\n        type: 'ADD_TO_SORTEDARRAY',\r\n        payload: payload\r\n    }\r\n};\r\n","import { store } from \"../../store\"\r\n\r\n/**\r\n * Returns the sortingRunStatus in store's state\r\n * @returns sortingRunStatus\r\n */\r\nfunction getCurrentSortingRunStatus() {\r\n    // Gets the current state object in store\r\n    const state = store.getState();\r\n\r\n    // Gets the sortingRunStatus from state object\r\n    const status = state.sortingRunStatus;\r\n    return status;\r\n}\r\n\r\nexport default getCurrentSortingRunStatus;","import getCurrentSortingRunStatus from \"./getSortingRunStatus\";\r\n\r\nasync function checkCurrentSortingRunStatus() {\r\n    if (getCurrentSortingRunStatus() === 'PAUSED') {\r\n        return new Promise((resolve, reject) => {\r\n            setInterval(() => {\r\n                if (getCurrentSortingRunStatus() === 'CONTINUED')\r\n                    resolve();\r\n                else if (getCurrentSortingRunStatus() === 'STOPPED')\r\n                    reject();\r\n            }, 10);\r\n\r\n        });\r\n    } else if (getCurrentSortingRunStatus() === 'STOPPED') {\r\n        return new Promise((resolve, reject) => reject());\r\n    } else {\r\n        return new Promise(resolve => resolve());\r\n    }\r\n}\r\n\r\nexport default checkCurrentSortingRunStatus;","import { store } from \"../../store\";\r\nimport { SORTING_SPEED_UPPER_LIMIT } from \"../../defaults\";\r\n\r\n/**\r\n * @returns the timedelay between each step,\r\n *          so if speed is 10 and speed range is 0-100\r\n *          timedelay will be of 90ms\r\n */\r\nfunction getTimeDelay() {\r\n    const state = store.getState();\r\n    const speed = state.speed;\r\n    return SORTING_SPEED_UPPER_LIMIT - speed;\r\n}\r\n\r\nexport default getTimeDelay;","import getTimeDelay from \"./getTimeDelay\";\r\n\r\nasync function sleep() {\r\n    await new Promise((resolve) => {\r\n        setTimeout(() => resolve(), getTimeDelay());\r\n    });\r\n}\r\n\r\nexport default sleep;","import { store } from \"../store\";\r\nimport { swapValues } from \"../actions/array\";\r\nimport { setCurrentlyChecking } from \"../actions/currentlyChecking\";\r\nimport { addToSortedArray } from \"../actions/sortedArray\";\r\nimport checkCurrentSortingRunStatus from \"./helpers/checkCurrentStatus\";\r\nimport sleep from \"./helpers/sleep\";\r\nimport { sortingCompleted } from \"../actions/sortingRunStatus\";\r\n\r\n/**\r\n * Performs Bubble Sort on the store's Array\r\n */\r\nasync function bubbleSort() {\r\n\r\n    // Gets current state object\r\n    const state = store.getState();\r\n\r\n    // Store's state Array\r\n    const localArray = state.array;\r\n    // length of array\r\n    const arraySize = state.array.length;\r\n\r\n    // Aborts the sort if value is False\r\n    let continueSort = true;\r\n\r\n    // Bubble sort algorithm \r\n\r\n    // Outer loop\r\n    for (let outerLoopIterator = 0; outerLoopIterator < arraySize - 1; outerLoopIterator++) {\r\n        let innerLoopIterator = 0;\r\n\r\n        //Inner loop\r\n        for (innerLoopIterator = 0; innerLoopIterator < arraySize - outerLoopIterator - 1; innerLoopIterator++) {\r\n\r\n            // Checking if Paused or Stopped\r\n            continueSort = await checkCurrentSortingRunStatus()\r\n                .then(() => true)\r\n                .catch(() => false);\r\n\r\n            // Aborting and returing if Stopped\r\n            if (!continueSort)\r\n                return;\r\n\r\n            // Delays according to selected speed\r\n            await sleep();\r\n\r\n            // Setting the current indices which are being checked to currentlyChecking\r\n            store.dispatch(setCurrentlyChecking([innerLoopIterator, innerLoopIterator + 1]));\r\n\r\n            if (localArray[innerLoopIterator] > localArray[innerLoopIterator + 1]) {\r\n\r\n                // Checking if Paused or Stopped\r\n                continueSort = await checkCurrentSortingRunStatus()\r\n                    .then(() => true)\r\n                    .catch(() => false);\r\n\r\n                // Aborting and returing if Stopped\r\n                if (!continueSort)\r\n                    return;\r\n\r\n                // Delays according to selected speed\r\n                await sleep();\r\n\r\n                // Swaps the values in store's state Array\r\n                store.dispatch(swapValues(innerLoopIterator, innerLoopIterator + 1));\r\n            }\r\n\r\n            // Checking if Paused or Stopped\r\n            continueSort = await checkCurrentSortingRunStatus()\r\n                .then(() => true)\r\n                .catch(() => false);\r\n\r\n            // Aborting and returing if Stopped\r\n            if (!continueSort)\r\n                return;\r\n\r\n            // Delays according to selected speed\r\n            await sleep();\r\n        }\r\n\r\n        // Adding the 'j' which has been sorted to sortedArray\r\n        store.dispatch(addToSortedArray(innerLoopIterator));\r\n    }\r\n\r\n    // Removing the first bar as currentlyChecking\r\n    store.dispatch(setCurrentlyChecking([]));\r\n\r\n    // First bar needs to be marked explicitly as \r\n    // it doesn't go inside inner loop\r\n    store.dispatch(addToSortedArray(0));\r\n\r\n    // After sorting sets the Sorting Running Status to COMPLETED\r\n    store.dispatch(sortingCompleted());\r\n}\r\n\r\nexport default bubbleSort;","export const sortingStarted = () => {\r\n    return {\r\n        type: 'STARTED'\r\n    }\r\n};\r\n\r\nexport const sortingContinued = () => {\r\n    return {\r\n        type: 'CONTINUED'\r\n    }\r\n};\r\n\r\nexport const sortingPaused = () => {\r\n    return {\r\n        type: 'PAUSED'\r\n    }\r\n};\r\n\r\nexport const sortingStopped = () => {\r\n    return {\r\n        type: 'STOPPED'\r\n    }\r\n};\r\n\r\nexport const sortingCompleted = () => {\r\n    return {\r\n        type: 'COMPLETED'\r\n    }\r\n}\r\n","export const setSpeed = (payload) => {\r\n    return {\r\n        type: 'SET_SPEED',\r\n        payload: payload\r\n    }\r\n};\r\n","import ControlBar from \"./ControlBar.jsx\";\r\nimport { connect } from \"react-redux\";\r\nimport { ARRAY_MIN_VALUE, ARRAY_MAX_VALUE } from \"../../defaults/index.js\";\r\nimport sort from \"../../algorithms\"\r\nimport { setArray } from \"../../actions/array\";\r\nimport { setSpeed } from \"../../actions/speed/index.js\";\r\nimport { setSortedArray } from \"../../actions/sortedArray/index.js\";\r\nimport { setAlgorithm } from \"../../actions/algorithm\";\r\nimport { setCurrentlyChecking } from \"../../actions/currentlyChecking/index.js\";\r\nimport { sortingContinued, sortingPaused, sortingStopped } from \"../../actions/sortingRunStatus/index.js\";\r\n\r\n/**\r\n * Return a random value in specified range\r\n * @param {*} lowerLimit Least possible random number\r\n * @param {*} upperLimit Maximum possible random number\r\n * @returns A random number between lowerLimit and UpperLimit (both inclusive)\r\n */\r\nconst getRandomValue = (lowerLimit, upperLimit) => {\r\n    return Math.floor(Math.random() * (upperLimit + 1)) + lowerLimit;\r\n}\r\n\r\n/**\r\n * Returns a random array pf specified Length\r\n * @param {*} arraySize Length of the array to be formed\r\n * @returns A random values array of length = arraySize\r\n */\r\nconst generateRandomArray = (arraySize) => {\r\n    const array = [];\r\n    const lowerLimit = ARRAY_MIN_VALUE;\r\n    const upperLimit = ARRAY_MAX_VALUE;\r\n    for (var i = 0; i < arraySize; i++) {\r\n        array.push(getRandomValue(lowerLimit, upperLimit));\r\n    }\r\n    return array;\r\n}\r\n\r\n/**\r\n * Takes the dispatch method as argument \r\n * and dispatches the methods for reseting \r\n * sortedArray and currentlyChecking array\r\n */\r\nconst empty_CurrentlyArray_and_SortedArray = (dispatch) => {\r\n    dispatch(setCurrentlyChecking([]));\r\n    dispatch(setSortedArray([]));\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    const array = state.array;\r\n    const algorithm = state.algorithm;\r\n    const sortingRunStatus = state.sortingRunStatus;\r\n    return { array, algorithm, sortingRunStatus };\r\n}\r\n\r\nconst mapDispatchToProps = () => dispatch => ({\r\n\r\n    /**\r\n     * Generats a random array of given size and sets it through dispatch\r\n     * @param {*} arraySize Length of the array to be generated\r\n     */\r\n    generateArray: (arraySize) => {\r\n        const randomGeneratedArray = generateRandomArray(arraySize);\r\n        dispatch(setArray(randomGeneratedArray));\r\n        empty_CurrentlyArray_and_SortedArray(dispatch);\r\n    },\r\n\r\n    /**\r\n     * Changes the algorithm through dispatch\r\n     * @param {*} selectedAlgo New algorithm to be set \r\n     */\r\n    changeAlgorithm: (selectedAlgo) => {\r\n        empty_CurrentlyArray_and_SortedArray(dispatch);\r\n        dispatch(setAlgorithm(selectedAlgo));\r\n    },\r\n\r\n    /**\r\n     * Changes the sorting display speed of algorithm\r\n     * @param {*} selectedSpeed Selected Speed\r\n     */\r\n    changeSpeed: (selectedSpeed) => {\r\n        empty_CurrentlyArray_and_SortedArray(dispatch);\r\n        dispatch(setSpeed(selectedSpeed));\r\n    },\r\n\r\n    /**\r\n     * Starts the sorting\r\n     */\r\n    startSorting: () => {\r\n        empty_CurrentlyArray_and_SortedArray(dispatch);\r\n        sort();\r\n    },\r\n\r\n    /**\r\n     * Pauses the current sorting process\r\n     * by dispatching the sortingPaused\r\n     */\r\n    pauseSorting: () => {\r\n        dispatch(sortingPaused());\r\n    },\r\n\r\n    /**\r\n     * Continues the paused sorting process\r\n     * by dispatching sortingContinued\r\n     */\r\n    continueSorting: () => {\r\n        dispatch(sortingContinued());\r\n    },\r\n\r\n    /**\r\n     * Stops the current sorting process\r\n     * by dispatching sortingStopped\r\n     */\r\n    stopSorting: () => {\r\n        dispatch(sortingStopped());\r\n        empty_CurrentlyArray_and_SortedArray(dispatch);\r\n    }\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ControlBar);","export const setAlgorithm = (payload) => {\r\n    return {\r\n        type: 'SET_ALGORITHM',\r\n        payload: payload\r\n    }\r\n};\r\n","import bubbleSort from \"./bubbleSort\";\r\nimport mergeSort from \"./mergeSort\";\r\nimport quickSort from \"./quickSort\";\r\nimport heapSort from \"./heapSort\";\r\nimport { store } from \"../store\";\r\nimport { sortingStarted } from \"../actions/sortingRunStatus\";\r\n\r\nexport default function sort() {\r\n\r\n    const state = store.getState();\r\n\r\n    const algorithm = state.algorithm;\r\n\r\n    switch (algorithm) {\r\n\r\n        case 'BUBBLE_SORT': {\r\n            store.dispatch(sortingStarted());\r\n            bubbleSort();\r\n            break;\r\n        }\r\n        case 'MERGE_SORT': {\r\n            store.dispatch(sortingStarted());\r\n            mergeSort();\r\n            break;\r\n        }\r\n        case 'QUICK_SORT': {\r\n            store.dispatch(sortingStarted());\r\n            quickSort();\r\n            break;\r\n        }\r\n        case 'HEAP_SORT': {\r\n            store.dispatch(sortingStarted());\r\n            heapSort();\r\n            break;\r\n        }\r\n        default: {\r\n            console.error(\"No sorting algorithm selected, can't sort\");\r\n            return;\r\n        }\r\n    }\r\n\r\n}","import React from \"react\";\r\nimport ArrayBars from \"../ArrayBars/ArrayBars\";\r\nimport ControlBar from \"../ControlBar/ControlBar\";\r\n\r\nfunction SortingVisualizer() {\r\n    return (\r\n        <div>\r\n            <ControlBar />\r\n            <ArrayBars />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SortingVisualizer;","import React from \"react\";\nimport SortingVisualizer from \"./SortingVisualizer/SortingVisualizer\";\n\nfunction App() {\n  return (\n    <SortingVisualizer />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport { store } from './store';\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n\n  //wrapping the app around store\n  <Provider store={store}>\n    <App />\n  </Provider>,\n\n  document.getElementById('root')\n);\n"],"sourceRoot":""}